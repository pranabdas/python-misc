(self.webpackChunkpython_tutorial=self.webpackChunkpython_tutorial||[]).push([[621],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return m},kt:function(){return f}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function p(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=r.createContext({}),c=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):p(p({},e),t)),n},m=function(t){var e=c(t.components);return r.createElement(l.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,l=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),u=c(n),f=o,d=u["".concat(l,".").concat(f)]||u[f]||s[f]||a;return n?r.createElement(d,p(p({ref:e},m),{},{components:n})):r.createElement(d,p({ref:e},m))}));function f(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,p=new Array(a);p[0]=u;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:o,p[1]=i;for(var c=2;c<a;c++)p[c]=n[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},842:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return m},default:function(){return u}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),p=["components"],i={title:"Creating custom colormaps",sidebar_label:"Custom colormap"},l=void 0,c={unversionedId:"matplotlib/custom-colormap",id:"matplotlib/custom-colormap",isDocsHomePage:!1,title:"Creating custom colormaps",description:"Matplotlib includes wonderful colormaps. Moreover, it is possible to create any",source:"@site/docs/matplotlib/custom-colormap.md",sourceDirName:"matplotlib",slug:"/matplotlib/custom-colormap",permalink:"/python-tutorial/matplotlib/custom-colormap",editUrl:"https://github.com/pranabdas/python-tutorial/blob/master/docs/matplotlib/custom-colormap.md",version:"current",frontMatter:{title:"Creating custom colormaps",sidebar_label:"Custom colormap"},sidebar:"docs",previous:{title:"Customizing matplotlib",permalink:"/python-tutorial/matplotlib/mpl-customizations"},next:{title:"Numerical operations",permalink:"/python-tutorial/numpy/numpy-basics"}},m=[],s={toc:m};function u(t){var e=t.components,i=(0,o.Z)(t,p);return(0,a.kt)("wrapper",(0,r.Z)({},s,i,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Matplotlib includes wonderful colormaps. Moreover, it is possible to create any\ncustom colormap we want. We need the RGB values in a file. We could also include\nalpha (transparency) values in 4",(0,a.kt)("sup",null,"th")," column."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams["figure.dpi"]=150\nplt.rcParams["figure.facecolor"]="white"\n\nimport sys\nsys.path.append("/root/")\n# https://github.com/pranabdas/arpespythontools\nimport arpespythontools as arp\n\ndef create_cmap(data_path):\n    import numpy as np\n    from matplotlib.colors import ListedColormap\n    contents = open(data_path, "r").readlines()\n    cmap_length = len(contents)\n    cmap = np.ndarray((cmap_length, 4))\n\n    for ii in range(cmap_length):\n        cmap_row = contents[ii][:-1].split(\'\\t\')\n        cmap[ii, 0] = cmap_row[0]\n        cmap[ii, 1] = cmap_row[1]\n        cmap[ii, 2] = cmap_row[2]\n        cmap[ii, 3] = 1  # Default alpha\n    cmap = ListedColormap(cmap)\n    return cmap\n\nmy_cmap = create_cmap("../datafiles/cmap_blue_hot.dat")\n[data, x, y] = arp.import_itx(\'../datafiles/GX.itx\')\n\nplt.imshow(data, aspect=\'auto\', origin="lower", interpolation=\'none\', \\\n    filterrad=4.0, cmap=my_cmap, vmin=0, vmax=600)\n# plt.set_cmap(\'gist_heat_r\')\nplt.show()\n')),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"custom colormap",src:n(7331).Z})))}u.isMDXComponent=!0},7331:function(t,e,n){"use strict";e.Z=n.p+"assets/images/custom-colormap-77caf1555b6db20ebc2f64eadb8a4681.png"}}]);