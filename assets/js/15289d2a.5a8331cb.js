(self.webpackChunkpython_tutorial=self.webpackChunkpython_tutorial||[]).push([[946],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),f=r,m=u["".concat(p,".").concat(f)]||u[f]||c[f]||i;return n?a.createElement(m,l(l({ref:t},d),{},{components:n})):a.createElement(m,l({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7694:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),l=["components"],o={title:"File read write"},p=void 0,s={unversionedId:"basics/file-io",id:"basics/file-io",isDocsHomePage:!1,title:"File read write",description:"Reading data from file",source:"@site/docs/basics/file-io.md",sourceDirName:"basics",slug:"/basics/file-io",permalink:"/python-tutorial/basics/file-io",editUrl:"https://github.com/pranabdas/python-tutorial/blob/master/docs/basics/file-io.md",version:"current",frontMatter:{title:"File read write"},sidebar:"docs",previous:{title:"Class",permalink:"/python-tutorial/basics/class"},next:{title:"Basic plotting",permalink:"/python-tutorial/matplotlib/basic-plotting"}},d=[{value:"Reading data from file",id:"reading-data-from-file",children:[]},{value:"Writing data to file",id:"writing-data-to-file",children:[]},{value:"File I/O using numpy",id:"file-io-using-numpy",children:[]}],c={toc:d};function u(e){var t=e.components,o=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"reading-data-from-file"},"Reading data from file"),(0,i.kt)("p",null,"Being able to read data from files and write the data generated by your program\nis an essential part of programming."),(0,i.kt)("p",null,"Here we will open a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"xps-data.txt")," which is stored in the ",(0,i.kt)("inlineCode",{parentName:"p"},"datafiles"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pranabdas/python-tutorial/"},"directory"),"."),(0,i.kt)("p",null,"Our data file contains two columns of numbers; energy and intensity. We can read\nthe data following way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# create two empty lists to store our energy and intensity values\nenergy = []\nintensity = []\n\nfid = open('../datafiles/xps-data.txt', 'r')\n# read one line at a time\ndata = fid.readlines()\nfid.close()\n\n# number of lines we have\nlines = len(data);\nfor lines in range(lines):\n    data_row = data[lines]\n\n    # remove the last newline character from each line\n    data_row = data_row[:-1]\n\n    # split in the tab character to separate energy and intensity strings\n    data_row = data_row.split('\\t')\n\n    # store them in our energy and intensity variables as float\n    energy.append(float(data_row[0]))\n    intensity.append(float(data_row[1]))\n")),(0,i.kt)("p",null,"Now that our data is stored in the energy and intensity variables. Best way to\nvisualize our data is to make a plot using matplotlib:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.figure(figsize = (10, 8))\nplt.plot(energy, intensity)\nplt.xlabel('Kinetic energy (eV)')\nplt.ylabel('Intensity (a.u.)')\nplt.show()\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"plot-two-col-data",src:n(8152).Z})),(0,i.kt)("h3",{id:"writing-data-to-file"},"Writing data to file"),(0,i.kt)("p",null,"Now that we are able to read data from a file, and use in our program, let us\ntry to generate and save some data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\nx = np.linspace(-2*np.pi, 2*np.pi, num = 100)\ny = (np.sin(x)/x)**2\n\nplt.figure(figsize = (10, 8))\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.show()\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"func-plot",src:n(700).Z})),(0,i.kt)("p",null,"We can save the data as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"fid = open('../datafiles/data.txt', 'w')\n\nfor index in range(len(x)):\n    fid.write('{0}\\t{1}\\n'.format(x[index], y[index]))\nfid.close()\n")),(0,i.kt)("p",null,"We have stored our data in a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"data.txt"),"."),(0,i.kt)("h3",{id:"file-io-using-numpy"},"File I/O using numpy"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"numpy")," has a helpful library to read/write formatted data files. We can do\nabove tasks following way using ",(0,i.kt)("inlineCode",{parentName:"p"},"numpy"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# read from file\ndata = np.loadtxt(\"../datafiles/xps-data.txt\")\n\n# plot\nplt.plot(data[:, 0], data[:, 1])\nplt.xlabel('Kinetic energy (eV)')\nplt.ylabel('Intensity (a.u.)')\nplt.show()\n\n# save to file\ndata = np.array([x, y]).T\nnp.savetxt(\"../datafiles/data.txt\", data)\n")))}u.isMDXComponent=!0},700:function(e,t,n){"use strict";t.Z=n.p+"assets/images/func-plot-b5d83c4e3eacda17ed72fddaa79d57cd.png"},8152:function(e,t,n){"use strict";t.Z=n.p+"assets/images/plot-two-col-data-ac1e24056f10166f600f85acffb7ddbd.png"}}]);