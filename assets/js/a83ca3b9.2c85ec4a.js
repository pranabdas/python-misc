(self.webpackChunkpython_tutorial=self.webpackChunkpython_tutorial||[]).push([[11],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return i},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},i=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},E=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),E=p(a),m=r,d=E["".concat(c,".").concat(m)]||E[m]||u[m]||l;return a?n.createElement(d,o(o({ref:t},i),{},{components:a})):n.createElement(d,o({ref:t},i))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=E;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}E.displayName="MDXCreateElement"},8498:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return i},default:function(){return E}});var n=a(2122),r=a(9756),l=(a(7294),a(3905)),o=["components"],s={title:"SQL database"},c=void 0,p={unversionedId:"sql-database",id:"sql-database",isDocsHomePage:!1,title:"SQL database",description:"We will use sqlite3 to learn the syntax of SQL before working with servers.",source:"@site/docs/sql-database.md",sourceDirName:".",slug:"/sql-database",permalink:"/python-tutorial/sql-database",editUrl:"https://github.com/pranabdas/python-tutorial/blob/master/docs/sql-database.md",version:"current",frontMatter:{title:"SQL database"},sidebar:"docs",previous:{title:"Multiprocessing",permalink:"/python-tutorial/multiprocessing"},next:{title:"Django",permalink:"/python-tutorial/django/webapp"}},i=[],u={toc:i};function E(e){var t=e.components,a=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"We will use sqlite3 to learn the syntax of SQL before working with servers.\nInstall sqlite3 in Ubuntu:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"apt install sqlite3\n")),(0,l.kt)("p",null,"If you are on macOS, sqlite3 comes preinstalled (checked on Big Sur, 11.4). If\nyou don't have it installed in your computer, you can install from Homebrew:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"brew install sqlite3\n")),(0,l.kt)("p",null,"Creating a database:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sqlite3 car.db\n")),(0,l.kt)("p",null,"If the database file ",(0,l.kt)("inlineCode",{parentName:"p"},"car.db")," already exists, it will open it. In order to exit\nsqlite3 prompt, type: ",(0,l.kt)("inlineCode",{parentName:"p"},".exit"),"."),(0,l.kt)("p",null,"First we will get some data to import in our database. Run the following python\ncode to have our data in a csv file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import pandas as pd\nurl = "http://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data"\nheaders = ["symboling", "normalized-losses", "make", "fuel-type", "aspiration",\\\n          "num-of-doors", "body-style", "drive-wheels", "engine-location",\\\n          "wheel-base", "length", "width", "height", "curb-weight", "engine-type",\\\n          "num-of-cylinders", "engine-size", "fuel-system", "bore", "stroke",\\\n          "compression-ratio", "horsepower", "peak-rpm", "city-mpg", "highway-mpg",\\\n          "price"]\ndf = pd.read_csv(url, header=None, names=headers, na_values=["?"])\ndf.to_csv("cardata.csv", index=None)\n')),(0,l.kt)("p",null,"Now let's import the file in our SQL database."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sqlite3 car.db\nsqlite > .mode csv\nsqlite > .import cardata.csv cardata\nsqlite > .schema\n")),(0,l.kt)("p",null,"We can see the schema it automatically used while importing the data. Later we will create our own schema, before that let's explore the database we have imported. We can select/read columns from the table by:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sqlite > SELECT COLUMN1, COLUMN2, ... FROM TABLE1;\nsqlite > SELECT make, price FROM cardata;\nsqlite > SELECT * FROM cardata;\nsqlite > SELECT * FROM cardata WHERE price > 50000;\n")),(0,l.kt)("p",null,"We will see that it does not work as we expected, because in our database the price is TEXT and not a number. We will fix it later."),(0,l.kt)("p",null,"Use functions/methods: number of rows in a table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(*) FROM cardata;\n")),(0,l.kt)("p",null,"Number of toyota cars:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(*) FROM cardata WHERE make='toyota';\n")),(0,l.kt)("p",null,"Distinct car makers in our table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT make FROM cardata;\n")),(0,l.kt)("p",null,"Grouping:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT make, COUNT(make) FROM cardata GROUP BY make;\nSELECT make, COUNT(make) FROM cardata GROUP BY make HAVING COUNT(make) > 10;\n")),(0,l.kt)("p",null,"Sum, average, min, max functions:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT AVG(price) FROM cardata;\nSELECT AVG(price) FROM cardata WHERE make='jaguar';\nSELECT AVG(price) as avg_price FROM cardata;\n")),(0,l.kt)("p",null,"Other useful functions: ROUND(), LENGTH(), UCASE, LCASE, DAY(), MONTH(), DATE(), DATETIME(), TIMESTAMMP()."),(0,l.kt)("p",null,"Sub-query, nested-query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT make, price FROM cardata WHERE price = (SELECT MAX(price) FROM cardata);\nSELECT make, price FROM cardata WHERE price > (SELECT AVG(price) from cardata);\nSELECT make, price, (SELECT AVG(price) FROM cardata) FROM cardata;\n")),(0,l.kt)("p",null,"Select first 10 rows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT make, horsepower, price FROM cardata LIMIT 10;\nSELECT make, horsepower, price FROM cardata WHERE make = 'toyota' LIMIT 5;\n")),(0,l.kt)("p",null,"Let us create a table ourselves instead of importing it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"sqlite3 test.db\nsqlite > CREATE TABLE customer (\n    ID INTEGER,\n    NAME varchar(30)\n    );\n")),(0,l.kt)("p",null,"Create another table in the same database:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE newtable (\n    ID INT,\n    CCODE CHAR(2),\n    NAME VARCHAR(60)\n    );\n")),(0,l.kt)("p",null,"Delete a table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DROP TABLE newtable;\n")),(0,l.kt)("p",null,"Additional parameter while creating table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE country(\n    ID INT PRIMARY KEY NOT NULL,\n    CCODE CHAR(2),\n    NAME VARCHAR(60)\n);\n")),(0,l.kt)("p",null,"Insert data into our table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO country (ID, CCODE, NAME) VALUES (1, 'IN', 'India');\nINSERT INTO country (ID, CCODE, NAME) VALUES (2, 'SG', 'Singapore');\nINSERT INTO country (ID, CCODE, NAME) VALUES (3, 'US', 'United States');\n")),(0,l.kt)("p",null,"We can insert multiple rows at one time as well:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO country (ID, CCODE, NAME) VALUES (4, 'JP', 'Japan'),\n(5, 'CN', 'China'),\n(6, 'IT', 'Italy');\n")),(0,l.kt)("p",null,"Now we can check if the data is correctly entered:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM country;\n")),(0,l.kt)("p",null,"Update an entry in the table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"UPDATE country SET NAME='United States of America' WHERE ID=3;\nUPDATE country SET NAME=\"People's Republic of China\" WHERE CCODE='CN';\n")),(0,l.kt)("p",null,"Select row using string pattern and conditions:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM country WHERE NAME LIKE '%china%';\nSELECT * FROM country WHERE ID < 5 AND ID >= 3;\nSELECT * FROM country WHERE ID BETWEEN 2 AND 5;\nSELECT * FROM country WHERE CCODE='IN' OR CCODE='JP';\nSELECT * FROM country WHERE CCODE IN ('IN', 'JP', 'IT');\n")),(0,l.kt)("p",null,"Sorting results:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM country ORDER BY CCODE;\nSELECT * FROM country ORDER BY ID DESC;\n")),(0,l.kt)("p",null,"Instead column name, we can use column number as well:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM country ORDER BY 2;\n")),(0,l.kt)("p",null,"Let's create another table in our database:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE name(\n    CCODE CHAR(2),\n    NAME VARCHAR(60)\n);\n\nINSERT INTO name (CCODE, NAME) VALUES ('JP', 'Name Japan'),\n    ('IN', 'Pranab'),\n    ('IT', 'It name'),\n    ('SG', 'Sg name'),\n    ('CN', 'prc name'),\n    ('US', 'usa name');\n\nSELECT * FROM name WHERE CCODE IN (SELECT CCODE FROM country WHERE ID > 4);\nSELECT * FROM country WHERE CCODE IN (SELECT CCODE FROM country WHERE NAME='Italy');\n")),(0,l.kt)("p",null,"Delete a row:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'DELETE FROM country WHERE CCODE="CN";\n')),(0,l.kt)("p",null,"Delete multiple rows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DELETE FROM country WHERE CCODE IN ('US', 'JP', 'IT');\n")))}E.isMDXComponent=!0}}]);